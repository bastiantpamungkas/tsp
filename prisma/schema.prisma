datasource db {
  // provider = "mysql"
  // url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                            String    @id @default(cuid())
  name                          String
  email                         String   @unique
  image                         String?
  emailVerified                 DateTime?
  hashed_password               String?
  salt                          String?
  hashed_email_verify           String?
  updated                       DateTime?
  created                       DateTime?
  accounts                      Account[]
  sessions                      Session[]
  user_role                     User_Role[]
  workorder                     Workorder[]
  transaction                   Transaction[]
  Permission_created_user       Permission[]        @relation("Permission_created_user")
  Permission_updated_user       Permission[]        @relation("Permission_updated_user")
  Role_created_user             Role[]              @relation("Role_created_user")
  Role_updated_user             Role[]              @relation("Role_updated_user")
  Role_Permission_created_user  Role_Permission[]   @relation("Role_Permission_created_user")
  Role_Permission_updated_user  Role_Permission[]   @relation("Role_Permission_updated_user")
  User_Role_created_user        User_Role[]         @relation("User_Role_created_user")
  User_Role_updated_user        User_Role[]         @relation("User_Role_updated_user")
  Status_created_user           Status[]            @relation("Status_created_user")
  Status_updated_user           Status[]            @relation("Status_updated_user")
  Product_created_user          Product[]           @relation("Product_created_user")
  Product_updated_user          Product[]           @relation("Product_updated_user")
  Workorder_created_user        Workorder[]         @relation("Workorder_created_user")
  Workorder_updated_user        Workorder[]         @relation("Workorder_updated_user")
  Transaction_created_user      Transaction[]       @relation("Transaction_created_user")
  Transaction_updated_user      Transaction[]       @relation("Transaction_updated_user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Permission {
  id                String    @id @default(cuid())
  name              String
  description       String?
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  created_user      User?     @relation("Permission_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Permission_updated_user", fields: [updated_by], references: [id])
  role_permission   Role_Permission[]

  @@index([created_by], map: "Permission_created_by")
  @@index([updated_by], map: "Permission_updated_by")
}

model Role {
  id                String    @id @default(cuid())
  name              String
  description       String?
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  created_user      User?     @relation("Role_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Role_updated_user", fields: [updated_by], references: [id])
  role_permission   Role_Permission[]
  user_role         User_Role[]

  @@index([created_by], map: "Role_created_by")
  @@index([updated_by], map: "Role_updated_by")
}

model Role_Permission {
  id            String      @id @default(cuid())
  role_id       String
  permission_id String
  created_by    String?
  updated_by    String?
  created       DateTime?
  updated       DateTime?
  role          Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission    Permission  @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  created_user  User?     @relation("Role_Permission_created_user", fields: [created_by], references: [id])
  updated_user  User?     @relation("Role_Permission_updated_user", fields: [updated_by], references: [id])

  @@index([created_by], map: "Role_Permission_created_by")
  @@index([updated_by], map: "Role_Permission_updated_by")
}

model User_Role {
  id            String      @id @default(cuid())
  user_id       String
  role_id       String
  created_by    String?
  updated_by    String?
  created       DateTime?
  updated       DateTime?
  user          User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role          Role        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  created_user  User?       @relation("User_Role_created_user", fields: [created_by], references: [id])
  updated_user  User?       @relation("User_Role_updated_user", fields: [updated_by], references: [id])

  @@index([created_by], map: "User_Role_created_by")
  @@index([updated_by], map: "User_Role_updated_by")
}

model Status {
  id                String    @id @default(cuid())
  name              String
  description       String?
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  created_user      User?     @relation("Status_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Status_updated_user", fields: [updated_by], references: [id])
  workorder         Workorder[]
  transaction       Transaction[]

  @@index([created_by], map: "Status_created_by")
  @@index([updated_by], map: "Status_updated_by")
}

model Product {
  id                String    @id @default(cuid())
  name              String
  description       String?
  price             Int       @default(0)
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  created_user      User?     @relation("Product_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Product_updated_user", fields: [updated_by], references: [id])
  workorder         Workorder[]
  transaction       Transaction[]

  @@index([created_by], map: "Product_created_by")
  @@index([updated_by], map: "Product_updated_by")
}

model Workorder {
  id                String    @id @default(cuid())
  product_id        String
  description       String?
  qty               Int
  due_date          DateTime  @db.Date
  status_id         String
  user_id           String
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  product           Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  status            Status    @relation(fields: [status_id], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_user      User?     @relation("Workorder_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Workorder_updated_user", fields: [updated_by], references: [id])
  transaction       Transaction[]

  @@index([created_by], map: "Workorder_created_by")
  @@index([updated_by], map: "Workorder_updated_by")
}

model Transaction {
  id                String    @id @default(cuid())
  transaction_date  DateTime
  workorder_id      String
  product_id        String
  status_id         String
  qty               Int
  due_date          DateTime  @db.Date
  user_id           String
  description       String?
  created_by        String?
  updated_by        String?
  created           DateTime?
  updated           DateTime?
  workorder         Workorder @relation(fields: [workorder_id], references: [id], onDelete: Cascade)
  product           Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  status            Status    @relation(fields: [status_id], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_user      User?     @relation("Transaction_created_user", fields: [created_by], references: [id])
  updated_user      User?     @relation("Transaction_updated_user", fields: [updated_by], references: [id])

  @@index([created_by], map: "Transaction_created_by")
  @@index([updated_by], map: "Transaction_updated_by")
}